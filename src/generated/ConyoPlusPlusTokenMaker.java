/* The following code was generated by JFlex 1.4.1 on 11/29/14 4:17 PM */

package generated;

import created.MainFrame;
import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Conyo++ Language Lexer
 * CHUA, Jedrick
 * LIVELO, Evan Dennison
 * YAO, John Paul
 */

public class ConyoPlusPlusTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 3;
  public static final int DOCCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\10\1\11\1\7\1\0\1\4\1\13\22\0\1\11\1\25"+
    "\1\12\1\5\1\24\1\25\1\100\1\14\1\23\1\23\1\16\1\73"+
    "\1\22\1\74\1\17\1\15\1\3\11\3\1\35\1\22\1\75\1\77"+
    "\1\76\1\22\1\5\1\57\1\56\1\1\1\55\2\1\1\41\1\67"+
    "\2\1\1\63\1\1\1\40\1\64\1\37\1\66\1\1\1\53\1\62"+
    "\1\60\1\70\1\1\1\54\1\1\1\43\1\1\1\23\1\6\1\23"+
    "\1\4\1\2\1\0\1\44\1\46\1\72\1\47\1\20\1\32\1\61"+
    "\1\26\1\33\1\1\1\51\1\34\1\52\1\65\1\71\1\30\1\1"+
    "\1\42\1\31\1\27\1\50\1\1\1\36\1\1\1\45\1\1\1\21"+
    "\1\101\1\21\1\22\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\1\1\10\17\1\4\7\3\1\1\11\1\12\4\11"+
    "\1\13\5\11\1\14\3\11\1\15\1\0\1\15\2\5"+
    "\1\16\2\6\1\17\1\20\1\21\1\22\20\1\1\23"+
    "\2\1\1\24\15\0\1\22\1\25\1\26\1\17\1\27"+
    "\17\1\4\0\1\30\10\0\2\1\1\31\6\1\2\0"+
    "\1\32\2\0\1\33\2\0\1\34\17\1\6\0\27\1"+
    "\1\35\2\1\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u0108"+
    "\0\u0108\0\u01ce\0\u0210\0\u0252\0\u0108\0\u0294\0\u0108\0\u02d6"+
    "\0\u0318\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6"+
    "\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6"+
    "\0\u0738\0\u077a\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0108\0\u0882"+
    "\0\u08c4\0\u0906\0\u0948\0\u0108\0\u098a\0\u09cc\0\u0a0e\0\u0a50"+
    "\0\u0a92\0\u0108\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0294\0\u0bdc"+
    "\0\u0c1e\0\u0c60\0\u0108\0\u0ca2\0\u0ce4\0\u0d26\0\u0108\0\u0d68"+
    "\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78"+
    "\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188"+
    "\0\u11ca\0\u014a\0\u120c\0\u124e\0\u0108\0\u1290\0\u12d2\0\u1314"+
    "\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524"+
    "\0\u1566\0\u15a8\0\u0bdc\0\u0108\0\u0108\0\u0108\0\u0108\0\u15ea"+
    "\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa"+
    "\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a"+
    "\0\u1a4c\0\u1a8e\0\u0108\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8"+
    "\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u014a\0\u1d64\0\u1da6"+
    "\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6"+
    "\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6"+
    "\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6"+
    "\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u1f74\0\u2562\0\u203a"+
    "\0\u25a4\0\u2100\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730"+
    "\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940"+
    "\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50"+
    "\0\u2b92\0\u014a\0\u2bd4\0\u2c16\0\u2c58";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\3\5\1\10\2\11\1\12\1\11"+
    "\1\13\1\14\1\15\1\16\1\6\1\17\1\5\1\17"+
    "\2\15\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\15\1\27\1\30\1\31\4\6\1\32\1\33\1\34"+
    "\2\6\1\35\12\6\1\32\4\6\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\7\46\1\47\6\46"+
    "\1\50\7\46\1\51\3\46\1\52\3\46\1\53\52\46"+
    "\1\54\6\46\1\55\7\46\1\56\3\46\1\57\3\46"+
    "\1\60\43\46\7\61\1\62\16\61\1\63\3\61\1\64"+
    "\3\61\1\65\43\61\103\0\3\6\14\0\1\6\5\0"+
    "\7\6\1\0\35\6\7\0\3\66\1\7\1\0\2\66"+
    "\1\0\1\66\6\0\1\67\1\70\3\0\1\66\1\0"+
    "\7\66\1\0\35\66\7\0\6\12\1\71\1\72\2\12"+
    "\1\73\1\72\66\12\6\74\1\75\1\0\2\74\2\75"+
    "\1\76\65\74\15\0\1\77\1\100\66\0\1\101\77\0"+
    "\3\6\14\0\1\6\5\0\5\6\1\102\1\6\1\0"+
    "\35\6\10\0\3\6\14\0\1\6\5\0\1\103\6\6"+
    "\1\0\35\6\10\0\3\6\14\0\1\6\5\0\7\6"+
    "\1\0\33\6\1\104\1\6\10\0\3\6\14\0\1\6"+
    "\5\0\1\6\1\105\5\6\1\0\12\6\1\106\22\6"+
    "\10\0\3\6\14\0\1\6\5\0\6\6\1\107\1\0"+
    "\35\6\10\0\3\6\14\0\1\6\5\0\7\6\1\0"+
    "\27\6\1\110\5\6\10\0\3\6\14\0\1\6\5\0"+
    "\5\6\1\111\1\6\1\0\35\6\10\0\3\6\14\0"+
    "\1\6\5\0\7\6\1\0\6\6\1\112\26\6\10\0"+
    "\3\6\14\0\1\6\5\0\7\6\1\0\2\6\1\113"+
    "\32\6\10\0\3\6\14\0\1\6\5\0\7\6\1\0"+
    "\15\6\1\114\1\6\1\115\15\6\10\0\3\6\14\0"+
    "\1\6\5\0\7\6\1\0\12\6\1\116\22\6\10\0"+
    "\3\6\14\0\1\6\5\0\7\6\1\0\4\6\1\117"+
    "\1\6\1\120\24\6\1\121\1\6\10\0\3\6\14\0"+
    "\1\6\5\0\7\6\1\0\10\6\1\122\24\6\10\0"+
    "\3\6\14\0\1\6\5\0\7\6\1\0\6\6\1\123"+
    "\26\6\10\0\3\6\14\0\1\6\5\0\1\124\6\6"+
    "\1\0\35\6\102\0\1\15\102\0\1\15\103\0\2\15"+
    "\101\0\1\15\102\0\1\15\102\0\1\15\7\46\1\0"+
    "\6\46\1\0\7\46\1\0\3\46\1\0\3\46\1\0"+
    "\43\46\15\0\1\125\113\0\1\126\101\0\1\127\3\0"+
    "\1\130\104\0\1\131\61\0\1\132\112\0\1\133\101\0"+
    "\1\134\3\0\1\135\104\0\1\136\43\0\7\61\1\0"+
    "\16\61\1\0\3\61\1\0\3\61\1\0\43\61\27\0"+
    "\1\137\101\0\1\140\3\0\1\141\104\0\1\142\43\0"+
    "\4\66\1\0\2\66\1\0\1\66\7\0\1\66\3\0"+
    "\1\66\1\0\7\66\1\0\35\66\7\0\3\66\1\143"+
    "\1\0\2\66\1\0\1\66\7\0\1\66\3\0\1\66"+
    "\1\0\7\66\1\0\35\66\7\0\7\72\1\0\100\72"+
    "\1\71\3\72\1\144\67\72\7\75\1\0\4\75\1\145"+
    "\74\75\1\0\4\75\1\146\65\75\14\0\1\145\103\0"+
    "\1\147\63\0\3\66\1\101\1\0\2\66\1\0\1\66"+
    "\7\0\1\70\3\0\1\66\1\0\7\66\1\0\35\66"+
    "\10\0\3\6\14\0\1\6\5\0\7\6\1\0\4\6"+
    "\1\150\30\6\10\0\3\6\14\0\1\6\5\0\5\6"+
    "\1\151\1\6\1\0\35\6\10\0\3\6\14\0\1\6"+
    "\5\0\7\6\1\0\33\6\1\152\1\6\10\0\3\6"+
    "\14\0\1\6\5\0\7\6\1\0\4\6\1\153\30\6"+
    "\10\0\3\6\14\0\1\6\5\0\2\6\1\154\4\6"+
    "\1\0\35\6\10\0\3\6\14\0\1\6\5\0\7\6"+
    "\1\0\33\6\1\155\1\6\10\0\3\6\14\0\1\6"+
    "\5\0\1\6\1\156\5\6\1\0\35\6\10\0\3\6"+
    "\14\0\1\6\5\0\7\6\1\0\13\6\1\157\21\6"+
    "\10\0\3\6\14\0\1\6\5\0\6\6\1\160\1\0"+
    "\35\6\10\0\3\6\14\0\1\6\5\0\7\6\1\0"+
    "\3\6\1\122\31\6\10\0\3\6\14\0\1\6\5\0"+
    "\7\6\1\0\16\6\1\122\16\6\10\0\3\6\14\0"+
    "\1\6\5\0\7\6\1\0\15\6\1\122\17\6\10\0"+
    "\3\6\14\0\1\6\5\0\1\161\6\6\1\0\35\6"+
    "\10\0\3\6\14\0\1\162\5\0\7\6\1\0\35\6"+
    "\10\0\3\6\14\0\1\6\5\0\7\6\1\0\7\6"+
    "\1\163\25\6\10\0\3\6\14\0\1\6\5\0\7\6"+
    "\1\0\33\6\1\164\1\6\10\0\3\6\14\0\1\6"+
    "\5\0\7\6\1\0\13\6\1\165\21\6\10\0\3\6"+
    "\14\0\1\6\5\0\7\6\1\0\6\6\1\166\26\6"+
    "\36\0\1\167\102\0\1\170\105\0\1\171\103\0\1\172"+
    "\60\0\1\173\113\0\1\174\102\0\1\175\105\0\1\176"+
    "\103\0\1\177\72\0\1\200\102\0\1\201\105\0\1\202"+
    "\103\0\1\203\44\0\3\6\14\0\1\204\5\0\7\6"+
    "\1\0\35\6\10\0\3\6\14\0\1\6\5\0\3\6"+
    "\1\205\3\6\1\0\35\6\10\0\3\6\14\0\1\6"+
    "\5\0\7\6\1\0\4\6\1\206\30\6\10\0\3\6"+
    "\14\0\1\6\5\0\5\6\1\207\1\6\1\0\35\6"+
    "\10\0\3\6\14\0\1\210\5\0\7\6\1\0\35\6"+
    "\10\0\3\6\14\0\1\6\5\0\7\6\1\0\6\6"+
    "\1\110\26\6\10\0\3\6\14\0\1\6\5\0\7\6"+
    "\1\0\7\6\1\206\25\6\10\0\3\6\14\0\1\211"+
    "\5\0\7\6\1\0\35\6\10\0\3\6\14\0\1\156"+
    "\5\0\7\6\1\0\35\6\10\0\3\6\14\0\1\6"+
    "\5\0\1\206\6\6\1\0\35\6\10\0\3\6\14\0"+
    "\1\6\5\0\7\6\1\0\6\6\1\212\26\6\10\0"+
    "\3\6\14\0\1\6\5\0\7\6\1\0\6\6\1\213"+
    "\26\6\10\0\3\6\14\0\1\6\5\0\6\6\1\156"+
    "\1\0\35\6\10\0\3\6\14\0\1\214\5\0\7\6"+
    "\1\0\35\6\10\0\3\6\14\0\1\6\5\0\7\6"+
    "\1\0\4\6\1\156\30\6\37\0\1\215\106\0\1\216"+
    "\64\0\1\170\100\0\1\217\112\0\1\220\106\0\1\221"+
    "\64\0\1\175\100\0\1\222\112\0\1\223\106\0\1\224"+
    "\64\0\1\201\100\0\1\225\63\0\3\6\14\0\1\6"+
    "\5\0\7\6\1\0\5\6\1\226\27\6\10\0\3\6"+
    "\14\0\1\6\5\0\7\6\1\0\26\6\1\227\6\6"+
    "\10\0\3\6\14\0\1\6\5\0\7\6\1\0\27\6"+
    "\1\230\5\6\10\0\3\6\14\0\1\6\5\0\7\6"+
    "\1\0\4\6\1\204\30\6\10\0\3\6\14\0\1\6"+
    "\5\0\7\6\1\0\25\6\1\231\3\6\1\232\3\6"+
    "\10\0\3\6\14\0\1\6\5\0\7\6\1\0\13\6"+
    "\1\233\21\6\10\0\3\6\14\0\1\6\5\0\7\6"+
    "\1\0\11\6\1\122\23\6\10\0\3\6\14\0\1\6"+
    "\5\0\7\6\1\0\3\6\1\234\6\6\1\235\5\6"+
    "\1\236\1\237\1\240\1\6\1\241\1\242\2\6\1\243"+
    "\1\6\1\244\2\6\40\0\1\170\3\0\1\216\61\0"+
    "\1\245\65\0\1\217\1\246\1\217\1\0\1\246\6\0"+
    "\1\246\1\217\2\246\1\217\1\0\2\246\1\217\1\246"+
    "\7\217\1\246\35\217\2\246\2\0\2\246\32\0\1\175"+
    "\3\0\1\221\61\0\1\247\65\0\1\222\1\250\1\222"+
    "\1\0\1\250\6\0\1\250\1\222\2\250\1\222\1\0"+
    "\2\250\1\222\1\250\7\222\1\250\35\222\2\250\2\0"+
    "\2\250\32\0\1\201\3\0\1\224\61\0\1\251\65\0"+
    "\1\225\1\252\1\225\1\0\1\252\6\0\1\252\1\225"+
    "\2\252\1\225\1\0\2\252\1\225\1\252\7\225\1\252"+
    "\35\225\2\252\2\0\2\252\2\0\3\6\14\0\1\6"+
    "\5\0\7\6\1\0\6\6\1\253\26\6\10\0\3\6"+
    "\14\0\1\6\5\0\7\6\1\0\6\6\1\254\26\6"+
    "\10\0\3\6\14\0\1\6\5\0\7\6\1\0\23\6"+
    "\1\156\11\6\10\0\3\6\14\0\1\6\5\0\7\6"+
    "\1\0\6\6\1\255\26\6\10\0\3\6\14\0\1\6"+
    "\5\0\7\6\1\0\6\6\1\256\26\6\10\0\3\6"+
    "\14\0\1\6\5\0\7\6\1\0\12\6\1\235\22\6"+
    "\10\0\3\6\14\0\1\6\5\0\7\6\1\0\6\6"+
    "\1\257\26\6\10\0\3\6\14\0\1\6\5\0\2\6"+
    "\1\122\4\6\1\0\35\6\10\0\3\6\14\0\1\6"+
    "\5\0\7\6\1\0\6\6\1\260\26\6\10\0\3\6"+
    "\14\0\1\6\5\0\7\6\1\0\4\6\1\261\30\6"+
    "\10\0\3\6\14\0\1\6\5\0\7\6\1\0\6\6"+
    "\1\262\26\6\10\0\3\6\14\0\1\6\5\0\7\6"+
    "\1\0\12\6\1\263\22\6\10\0\3\6\14\0\1\6"+
    "\5\0\7\6\1\0\12\6\1\264\22\6\10\0\3\6"+
    "\14\0\1\6\5\0\7\6\1\0\6\6\1\244\26\6"+
    "\10\0\3\6\14\0\1\6\5\0\6\6\1\265\1\0"+
    "\35\6\24\0\1\217\101\0\1\222\101\0\1\225\65\0"+
    "\3\6\14\0\1\6\5\0\7\6\1\0\7\6\1\266"+
    "\25\6\10\0\3\6\14\0\1\6\5\0\6\6\1\267"+
    "\1\0\35\6\10\0\3\6\14\0\1\6\5\0\2\6"+
    "\1\270\4\6\1\0\35\6\10\0\3\6\14\0\1\6"+
    "\5\0\7\6\1\0\10\6\1\271\24\6\10\0\3\6"+
    "\14\0\1\6\5\0\7\6\1\0\1\272\34\6\10\0"+
    "\3\6\14\0\1\6\5\0\3\6\1\272\2\6\1\273"+
    "\1\0\35\6\10\0\3\6\14\0\1\6\5\0\1\6"+
    "\1\274\5\6\1\0\35\6\10\0\3\6\14\0\1\6"+
    "\5\0\7\6\1\0\1\270\34\6\10\0\3\6\14\0"+
    "\1\6\5\0\6\6\1\275\1\0\35\6\10\0\3\6"+
    "\14\0\1\6\5\0\1\272\6\6\1\0\35\6\10\0"+
    "\3\6\14\0\1\6\5\0\5\6\1\276\1\6\1\0"+
    "\35\6\10\0\3\6\14\0\1\6\5\0\7\6\1\0"+
    "\6\6\1\122\26\6\10\0\3\6\14\0\1\6\5\0"+
    "\7\6\1\0\6\6\1\277\26\6\10\0\3\6\14\0"+
    "\1\6\5\0\7\6\1\0\6\6\1\300\26\6\10\0"+
    "\3\6\14\0\1\6\5\0\7\6\1\0\6\6\1\301"+
    "\26\6\10\0\3\6\14\0\1\6\5\0\7\6\1\0"+
    "\6\6\1\302\26\6\10\0\3\6\14\0\1\6\5\0"+
    "\5\6\1\303\1\6\1\0\35\6\10\0\3\6\14\0"+
    "\1\302\5\0\7\6\1\0\35\6\10\0\3\6\14\0"+
    "\1\6\5\0\7\6\1\0\6\6\1\276\26\6\10\0"+
    "\3\6\14\0\1\6\5\0\1\6\1\302\5\6\1\0"+
    "\35\6\10\0\3\6\14\0\1\6\5\0\7\6\1\0"+
    "\27\6\1\304\5\6\10\0\3\6\14\0\1\6\5\0"+
    "\7\6\1\0\23\6\1\302\11\6\10\0\3\6\14\0"+
    "\1\6\5\0\7\6\1\0\27\6\1\300\5\6\10\0"+
    "\3\6\14\0\1\6\5\0\7\6\1\0\13\6\1\302"+
    "\21\6\10\0\3\6\14\0\1\6\5\0\7\6\1\0"+
    "\23\6\1\305\11\6\10\0\3\6\14\0\1\6\5\0"+
    "\7\6\1\0\25\6\1\231\7\6\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11418];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\2\11\3\1\1\11\1\1\1\11"+
    "\27\1\1\11\4\1\1\11\5\1\1\11\4\1\1\0"+
    "\3\1\1\11\3\1\1\11\25\1\1\11\15\0\1\1"+
    "\4\11\17\1\4\0\1\11\10\0\11\1\2\0\1\1"+
    "\2\0\1\1\2\0\20\1\6\0\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public ConyoPlusPlusTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
                if(tokenType == TokenTypes.IDENTIFIER)
                    MainFrame.newCompletion(zzBuffer, start, end);
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

						case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;

			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null;
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ConyoPlusPlusTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ConyoPlusPlusTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }
    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 30: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 31: break;
        case 22: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 32: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 33: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 34: break;
        case 21: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 35: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 36: break;
        case 24: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_DOCUMENTATION);
          }
        case 37: break;
        case 19: 
          { addToken(Token.RESERVED_WORD);
          }
        case 38: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 39: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 40: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 41: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 42: break;
        case 6: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 43: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 44: break;
        case 25: 
          { addToken(Token.DATA_TYPE);
          }
        case 45: break;
        case 20: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 46: break;
        case 15: 
          { addToken(Token.ERROR_CHAR);
          }
        case 47: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 48: break;
        case 14: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 49: break;
        case 28: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 50: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 51: break;
        case 29: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 52: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 53: break;
        case 23: 
          { start = zzMarkedPos-2; yybegin(DOCCOMMENT);
          }
        case 54: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 55: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 56: break;
        case 9: 
          { 
          }
        case 57: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 198: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 199: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 200: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 201: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
