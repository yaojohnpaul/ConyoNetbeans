/* The following code was generated by JFlex 1.6.0 */

package generated;

/*Import*/
import static created.MainFrame.s;
import generated.sym;
import java.io.*;
import java_cup.runtime.*;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.*;
import static org.fife.ui.rsyntaxtextarea.modes.JavaTokenMaker.MLC;

/**
 * Conyo++ Language Lexer
 * CHUA, Jedrick
 * LIVELO, Evan Dennison
 * YAO, John Paul
 */

public class ConyoTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\2\5\1\3\1\11\1\11\1\4\22\0\1\5\1\63\1\10"+
    "\1\0\1\63\1\63\1\71\1\7\1\63\1\63\1\13\1\64\1\63"+
    "\1\65\1\15\1\12\1\14\11\2\1\63\1\0\1\66\1\70\1\67"+
    "\2\0\1\41\1\34\1\1\1\55\2\1\1\21\1\56\2\1\1\47"+
    "\1\1\1\20\1\50\1\17\1\52\1\1\1\53\1\46\1\43\1\57"+
    "\1\1\1\54\1\1\1\25\1\1\1\63\1\6\1\63\1\0\1\1"+
    "\1\0\1\26\1\30\1\62\1\31\1\16\1\60\1\45\1\22\1\23"+
    "\1\1\1\33\1\35\1\32\1\51\1\61\1\40\1\1\1\24\1\36"+
    "\1\42\1\37\1\1\1\44\1\1\1\27\1\1\1\63\1\72\1\63"+
    "\7\0\1\11\u1fa2\0\1\11\1\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\4\5\1\3\17\2"+
    "\4\5\3\1\1\0\2\6\1\7\3\10\1\11\1\12"+
    "\1\0\11\2\1\13\11\2\2\3\1\7\1\14\2\12"+
    "\1\0\17\2\1\0\1\2\1\15\7\2\2\3\47\2"+
    "\1\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\354\0\u0127\0\u0162"+
    "\0\u019d\0\73\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u0162\0\u07d6\0\u0811"+
    "\0\73\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\166\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23"+
    "\0\73\0\73\0\73\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022"+
    "\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\166\0\u11bf"+
    "\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\73"+
    "\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534"+
    "\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c"+
    "\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4"+
    "\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\2\1\7"+
    "\1\10\1\0\1\11\1\12\1\13\1\2\1\3\1\14"+
    "\1\15\1\3\1\16\1\17\3\3\1\20\1\21\1\22"+
    "\1\23\2\3\1\24\1\25\1\3\1\26\1\3\1\27"+
    "\1\3\1\30\4\3\1\20\6\3\1\31\1\3\1\32"+
    "\1\12\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\74\0\2\3\11\0\1\3\1\0\45\3\12\0\1\4"+
    "\11\0\1\4\1\42\60\0\1\5\67\0\3\43\1\0"+
    "\1\44\1\43\1\44\1\45\1\44\62\43\3\46\2\47"+
    "\1\46\1\50\1\46\1\51\62\46\12\0\1\52\1\53"+
    "\74\0\1\42\56\0\2\3\11\0\1\3\1\0\2\3"+
    "\1\54\42\3\11\0\2\3\11\0\1\3\1\0\35\3"+
    "\1\55\1\3\1\56\5\3\11\0\2\3\11\0\1\3"+
    "\1\0\5\3\1\57\37\3\11\0\2\3\11\0\1\3"+
    "\1\0\33\3\1\60\11\3\11\0\2\3\11\0\1\3"+
    "\1\0\21\3\1\61\23\3\11\0\2\3\11\0\1\3"+
    "\1\0\6\3\1\62\1\3\1\63\32\3\1\64\1\3"+
    "\11\0\2\3\11\0\1\3\1\0\12\3\1\65\32\3"+
    "\11\0\2\3\11\0\1\3\1\0\10\3\1\66\34\3"+
    "\11\0\2\3\11\0\1\3\1\0\5\3\1\67\37\3"+
    "\11\0\2\3\11\0\1\3\1\0\21\3\1\70\2\3"+
    "\1\71\20\3\11\0\2\3\11\0\1\3\1\0\43\3"+
    "\1\72\1\3\11\0\2\3\11\0\1\3\1\0\4\3"+
    "\1\73\40\3\11\0\2\3\11\0\1\3\1\0\10\3"+
    "\1\74\34\3\11\0\2\3\11\0\1\3\1\0\17\3"+
    "\1\75\25\3\11\0\2\3\11\0\1\3\1\0\4\3"+
    "\1\76\40\3\74\0\1\12\73\0\1\12\74\0\2\12"+
    "\72\0\1\12\73\0\1\12\73\0\1\12\2\0\1\77"+
    "\11\0\1\100\56\0\3\44\1\0\3\44\1\5\66\44"+
    "\1\0\3\44\1\101\63\44\7\0\1\5\63\0\6\47"+
    "\1\50\1\47\1\102\65\47\2\0\4\47\1\0\61\47"+
    "\3\52\1\103\1\104\66\52\13\53\1\105\57\53\1\0"+
    "\2\3\11\0\1\3\1\0\3\3\1\65\41\3\11\0"+
    "\2\3\11\0\1\3\1\0\36\3\1\65\6\3\11\0"+
    "\2\3\11\0\1\3\1\0\35\3\1\65\7\3\11\0"+
    "\2\3\11\0\1\3\1\0\6\3\1\106\36\3\11\0"+
    "\2\3\11\0\1\3\1\0\24\3\1\107\20\3\11\0"+
    "\2\3\11\0\1\3\1\0\4\3\1\110\40\3\11\0"+
    "\2\3\11\0\1\3\1\0\1\111\44\3\11\0\2\3"+
    "\11\0\1\3\1\0\11\3\1\112\33\3\11\0\2\3"+
    "\11\0\1\3\1\0\43\3\1\113\1\3\11\0\2\3"+
    "\11\0\1\3\1\0\15\3\1\114\27\3\11\0\2\3"+
    "\11\0\1\3\1\0\15\3\1\115\27\3\11\0\2\3"+
    "\11\0\1\3\1\0\22\3\1\116\22\3\11\0\2\3"+
    "\11\0\1\3\1\0\6\3\1\117\36\3\11\0\2\3"+
    "\11\0\1\3\1\0\43\3\1\120\1\3\11\0\2\3"+
    "\11\0\1\3\1\0\5\3\1\121\37\3\11\0\2\3"+
    "\11\0\1\3\1\0\17\3\1\122\25\3\11\0\2\3"+
    "\11\0\1\3\1\0\43\3\1\123\1\3\11\0\2\3"+
    "\11\0\1\3\1\0\10\3\1\124\34\3\12\0\1\77"+
    "\11\0\1\77\1\0\1\125\72\0\1\125\57\0\1\103"+
    "\67\0\12\53\1\103\1\105\57\53\1\0\2\3\11\0"+
    "\1\3\1\0\1\126\44\3\11\0\2\3\11\0\1\3"+
    "\1\0\11\3\1\127\33\3\11\0\2\3\11\0\1\3"+
    "\1\0\4\3\1\127\40\3\11\0\2\3\11\0\1\3"+
    "\1\0\10\3\1\130\34\3\11\0\2\3\11\0\1\3"+
    "\1\0\10\3\1\131\34\3\11\0\2\3\11\0\1\3"+
    "\1\0\17\3\1\107\25\3\11\0\2\3\11\0\1\3"+
    "\1\0\1\132\44\3\11\0\2\3\11\0\1\3\1\0"+
    "\1\133\44\3\11\0\2\3\11\0\1\3\1\0\1\134"+
    "\44\3\11\0\2\3\11\0\1\3\1\0\5\3\1\135"+
    "\37\3\11\0\2\3\11\0\1\3\1\0\6\3\1\127"+
    "\36\3\11\0\2\3\11\0\1\3\1\0\20\3\1\136"+
    "\24\3\11\0\2\3\11\0\1\3\1\0\1\107\44\3"+
    "\11\0\2\3\11\0\1\3\1\0\10\3\1\60\34\3"+
    "\11\0\2\3\11\0\1\3\1\0\6\3\1\107\36\3"+
    "\12\0\1\137\11\0\1\140\57\0\2\3\11\0\1\3"+
    "\1\0\7\3\1\141\35\3\11\0\2\3\11\0\1\3"+
    "\1\0\15\3\1\142\27\3\11\0\2\3\11\0\1\3"+
    "\1\0\13\3\1\65\31\3\11\0\2\3\11\0\1\3"+
    "\1\0\3\3\1\143\12\3\1\144\2\3\1\145\1\3"+
    "\1\146\1\3\1\147\2\3\1\150\1\151\2\3\1\152"+
    "\4\3\1\153\3\3\11\0\2\3\11\0\1\3\1\0"+
    "\31\3\1\154\6\3\1\155\4\3\11\0\2\3\11\0"+
    "\1\3\1\0\6\3\1\126\36\3\11\0\2\3\11\0"+
    "\1\3\1\0\33\3\1\156\11\3\11\0\2\3\11\0"+
    "\1\3\1\0\32\3\1\157\12\3\12\0\1\137\11\0"+
    "\1\137\57\0\2\3\11\0\1\3\1\0\10\3\1\160"+
    "\34\3\11\0\2\3\11\0\1\3\1\0\21\3\1\145"+
    "\23\3\11\0\2\3\11\0\1\3\1\0\10\3\1\161"+
    "\34\3\11\0\2\3\11\0\1\3\1\0\10\3\1\162"+
    "\34\3\11\0\2\3\11\0\1\3\1\0\22\3\1\65"+
    "\22\3\11\0\2\3\11\0\1\3\1\0\6\3\1\163"+
    "\36\3\11\0\2\3\11\0\1\3\1\0\10\3\1\164"+
    "\34\3\11\0\2\3\11\0\1\3\1\0\21\3\1\165"+
    "\23\3\11\0\2\3\11\0\1\3\1\0\21\3\1\166"+
    "\23\3\11\0\2\3\11\0\1\3\1\0\10\3\1\153"+
    "\34\3\11\0\2\3\11\0\1\3\1\0\17\3\1\167"+
    "\25\3\11\0\2\3\11\0\1\3\1\0\10\3\1\170"+
    "\34\3\11\0\2\3\11\0\1\3\1\0\10\3\1\171"+
    "\34\3\11\0\2\3\11\0\1\3\1\0\27\3\1\107"+
    "\15\3\11\0\2\3\11\0\1\3\1\0\10\3\1\172"+
    "\34\3\11\0\2\3\11\0\1\3\1\0\11\3\1\173"+
    "\33\3\11\0\2\3\11\0\1\3\1\0\26\3\1\173"+
    "\16\3\11\0\2\3\11\0\1\3\1\0\17\3\1\174"+
    "\1\173\24\3\11\0\2\3\11\0\1\3\1\0\24\3"+
    "\1\175\20\3\11\0\2\3\11\0\1\3\1\0\26\3"+
    "\1\176\16\3\11\0\2\3\11\0\1\3\1\0\17\3"+
    "\1\177\25\3\11\0\2\3\11\0\1\3\1\0\4\3"+
    "\1\173\40\3\11\0\2\3\11\0\1\3\1\0\5\3"+
    "\1\200\37\3\11\0\2\3\11\0\1\3\1\0\22\3"+
    "\1\176\22\3\11\0\2\3\11\0\1\3\1\0\12\3"+
    "\1\201\32\3\11\0\2\3\11\0\1\3\1\0\17\3"+
    "\1\202\25\3\11\0\2\3\11\0\1\3\1\0\10\3"+
    "\1\65\34\3\11\0\2\3\11\0\1\3\1\0\5\3"+
    "\1\203\37\3\11\0\2\3\11\0\1\3\1\0\1\65"+
    "\44\3\11\0\2\3\11\0\1\3\1\0\10\3\1\204"+
    "\34\3\11\0\2\3\11\0\1\3\1\0\10\3\1\200"+
    "\34\3\11\0\2\3\11\0\1\3\1\0\24\3\1\65"+
    "\20\3\11\0\2\3\11\0\1\3\1\0\10\3\1\205"+
    "\34\3\11\0\2\3\11\0\1\3\1\0\10\3\1\206"+
    "\34\3\11\0\2\3\11\0\1\3\1\0\15\3\1\65"+
    "\27\3\11\0\2\3\11\0\1\3\1\0\27\3\1\65"+
    "\15\3\11\0\2\3\11\0\1\3\1\0\33\3\1\204"+
    "\11\3\11\0\2\3\11\0\1\3\1\0\33\3\1\207"+
    "\11\3\11\0\2\3\11\0\1\3\1\0\27\3\1\210"+
    "\15\3\11\0\2\3\11\0\1\3\1\0\31\3\1\154"+
    "\13\3\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7375];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\4\1\1\11\27\1\1\0"+
    "\6\1\1\11\1\1\1\0\25\1\3\11\1\1\1\0"+
    "\17\1\1\0\12\1\1\11\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

   /**   
    * Constructor.  This must be here because JFlex does not generate a   
    * no-parameter constructor.   
    */   
   public ConyoTokenMaker() {   
   }   

   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addToken(int, int, int)   
    */   
   private void addHyperlinkToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, true);   
   }   

   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    */   
   private void addToken(int tokenType) {   
      addToken(zzStartRead, zzMarkedPos-1, tokenType);   
   }   

   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addHyperlinkToken(int, int, int)   
    */   
   private void addToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, false);   
   }   

   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param array The character array.   
    * @param start The starting offset in the array.   
    * @param end The ending offset in the array.   
    * @param tokenType The token's type.   
    * @param startOffset The offset in the document at which this token   
    *        occurs.   
    * @param hyperlink Whether this token is a hyperlink.   
    */   
   public void addToken(char[] array, int start, int end, int tokenType,   
                  int startOffset, boolean hyperlink) {   
      super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
      zzStartRead = zzMarkedPos;   
   }   

   /**   
    * Returns the text to place at the beginning and end of a   
    * line to "comment" it in a this programming language.   
    *   
    * @return The start and end strings to add to a line to "comment"   
    *         it out.   
    */   
   public String[] getLineCommentStartAndEnd() {   
      return new String[] { "//", null };   
   }   

   /**   
    * Returns the first token in the linked list of tokens generated   
    * from <code>text</code>.  This method must be implemented by   
    * subclasses so they can correctly implement syntax highlighting.   
    *   
    * @param text The text from which to get tokens.   
    * @param initialTokenType The token type we should start with.   
    * @param startOffset The offset into the document at which   
    *        <code>text</code> starts.   
    * @return The first <code>Token</code> in a linked list representing   
    *         the syntax highlighted text.   
    */   
   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   

      resetTokenList();   
      this.offsetShift = -text.offset + startOffset;   

      // Start off in the proper state.   
      int state = Token.NULL;   
      switch (initialTokenType) {   
                  case Token.COMMENT_MULTILINE:   
            state = MLC;   
            start = text.offset;   
            break;   

         /* No documentation comments */   
         default:   
            state = Token.NULL;   
      }   

      s = text;   
      try {   
         yyreset(zzReader);   
         yybegin(state);   
         return yylex();   
      } catch (IOException ioe) {   
         ioe.printStackTrace();   
         return null;   
      }   

   }   

   /**   
    * Refills the input buffer.   
    *   
    * @return      <code>true</code> if EOF was reached, otherwise   
    *              <code>false</code>.   
    */   
   private boolean zzRefill() {   
      return zzCurrentPos>=s.offset+s.count;   
   }   

   /**   
    * Resets the scanner to read from a new input stream.   
    * Does not close the old reader.   
    *   
    * All internal variables are reset, the old input stream    
    * <b>cannot</b> be reused (internal buffer is discarded and lost).   
    * Lexical state is set to <tt>YY_INITIAL</tt>.   
    *   
    * @param reader   the new input stream    
    */   
   public final void yyreset(Reader reader) {   
      // 's' has been updated.   
      zzBuffer = s.array;   
      /*   
       * We replaced the line below with the two below it because zzRefill   
       * no longer "refills" the buffer (since the way we do it, it's always   
       * "full" the first time through, since it points to the segment's   
       * array).  So, we assign zzEndRead here.   
       */   
      //zzStartRead = zzEndRead = s.offset;   
      zzStartRead = s.offset;   
      zzEndRead = zzStartRead + s.count - 1;   
      zzCurrentPos = zzMarkedPos = s.offset;   
      zzLexicalState = YYINITIAL;   
      zzReader = reader;   
      zzAtBOL  = true;   
      zzAtEOF  = false;   
   }   



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ConyoTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Invalid.");
          }
        case 14: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 15: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 16: break;
        case 4: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 17: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 18: break;
        case 6: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 19: break;
        case 7: 
          { addToken(Token.ERROR_CHAR);
          }
        case 20: break;
        case 8: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 21: break;
        case 9: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 22: break;
        case 10: 
          { /*Comment*/
          }
        case 23: break;
        case 11: 
          { addToken(Token.RESERVED_WORD);
          }
        case 24: break;
        case 12: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 25: break;
        case 13: 
          { addToken(Token.DATA_TYPE);
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                addNullToken();
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
