
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package generated;

import java_cup.runtime.*;
import created.*;
import created.ParseTree.Array.*;
import created.ParseTree.Arte.*;
import created.ParseTree.Literals.*;
import created.ParseTree.Program.*;
import created.ParseTree.SabiSabi.*;
import created.ParseTree.Utos.*;
import created.ParseTree.Yaya.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\002\000\002\004\003\000\002\004\004" +
    "\000\002\005\010\000\002\005\005\000\002\005\004\000" +
    "\002\006\003\000\002\006\002\000\002\007\003\000\002" +
    "\007\004\000\002\010\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\014\003\000\002\015" +
    "\004\000\002\016\003\000\002\017\003\000\002\017\004" +
    "\000\002\020\007\000\002\020\005\000\002\021\004\000" +
    "\002\021\002\000\002\022\003\000\002\022\003\000\002" +
    "\023\004\000\002\024\013\000\002\024\012\000\002\025" +
    "\003\000\002\025\002\000\002\026\005\000\002\026\003" +
    "\000\002\027\004\000\002\030\005\000\002\031\003\000" +
    "\002\031\002\000\002\032\005\000\002\032\003\000\002" +
    "\033\004\000\002\034\005\000\002\035\005\000\002\035" +
    "\003\000\002\036\003\000\002\036\002\000\002\037\004" +
    "\000\002\037\003\000\002\040\003\000\002\040\004\000" +
    "\002\040\003\000\002\040\004\000\002\040\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\004" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\042\004\000\002\042\004\000\002" +
    "\042\004\000\002\042\004\000\002\042\005\000\002\043" +
    "\003\000\002\043\003\000\002\043\004\000\002\043\004" +
    "\000\002\044\004\000\002\044\004\000\002\044\004\000" +
    "\002\044\004\000\002\045\004\000\002\046\007\000\002" +
    "\047\006\000\002\050\006\000\002\051\010\000\002\052" +
    "\004\000\002\052\010\000\002\052\002\000\002\052\005" +
    "\000\002\052\005\000\002\053\011\000\002\054\007\000" +
    "\002\054\005\000\002\054\005\000\002\054\005\000\002" +
    "\054\002\000\002\055\007\000\002\055\007\000\002\056" +
    "\011\000\002\057\012\000\002\057\012\000\002\057\012" +
    "\000\002\060\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\063\004\000\002\061\003\000\002" +
    "\064\005\000\002\064\003\000\002\065\005\000\002\065" +
    "\003\000\002\066\005\000\002\066\003\000\002\067\005" +
    "\000\002\067\003\000\002\070\005\000\002\070\003\000" +
    "\002\071\005\000\002\071\003\000\002\072\004\000\002" +
    "\072\004\000\002\072\003\000\002\073\005\000\002\073" +
    "\003\000\002\074\003\000\002\074\003\000\002\075\003" +
    "\000\002\075\003\000\002\075\003\000\002\075\003\000" +
    "\002\076\003\000\002\076\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\012\003\007\004\010\005\ufffe\010\ufffe\001" +
    "\002\000\004\002\u0104\001\002\000\006\005\uffff\010\uffff" +
    "\001\002\000\012\003\007\004\010\005\ufffd\010\ufffd\001" +
    "\002\000\004\037\u0102\001\002\000\016\003\373\030\100" +
    "\031\073\032\074\033\103\034\076\001\002\000\006\005" +
    "\012\010\ufff7\001\002\000\004\071\354\001\002\000\004" +
    "\010\ufff8\001\002\000\004\010\351\001\002\000\006\003" +
    "\020\042\022\001\002\000\006\005\012\010\ufff6\001\002" +
    "\000\004\010\ufff5\001\002\000\060\002\uffcb\003\uffcb\005" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\042\uffcb\067\uffcb\070\uffcb" +
    "\071\uffcb\001\002\000\006\005\uffdb\010\uffdb\001\002\000" +
    "\042\003\051\011\053\012\030\013\061\014\027\015\026" +
    "\016\031\017\025\022\023\025\034\026\037\027\040\042" +
    "\uffc9\067\052\070\050\071\033\001\002\000\006\003\325" +
    "\043\326\001\002\000\046\003\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\042\uffc4\067\uffc4\070" +
    "\uffc4\071\uffc4\001\002\000\006\003\303\043\304\001\002" +
    "\000\006\003\276\043\277\001\002\000\006\003\272\071" +
    "\033\001\002\000\004\037\270\001\002\000\006\003\264" +
    "\043\265\001\002\000\046\003\051\011\053\012\030\013" +
    "\061\014\027\015\026\016\031\017\025\022\023\023\uffc7" +
    "\024\uffc7\025\034\026\037\027\040\042\uffc7\067\052\070" +
    "\050\071\033\001\002\000\062\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\050\uffe4\051" +
    "\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4" +
    "\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\067" +
    "\uffe4\070\uffe4\001\002\000\006\003\254\043\255\001\002" +
    "\000\012\036\105\037\uffde\067\237\070\236\001\002\000" +
    "\046\003\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6" +
    "\016\uffc6\017\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\042\uffc6\067\uffc6\070\uffc6\071\uffc6\001\002" +
    "\000\006\003\244\042\022\001\002\000\006\003\216\043" +
    "\217\001\002\000\046\003\uffbc\011\uffbc\012\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\042\uffbc\067\uffbc\070\uffbc" +
    "\071\uffbc\001\002\000\010\023\uffca\024\uffca\042\uffca\001" +
    "\002\000\060\036\uffe3\037\uffe3\040\uffe3\041\uffe3\044\uffe3" +
    "\045\212\046\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\067\uffe3\070\uffe3\001\002\000" +
    "\046\003\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\042\uffbf\067\uffbf\070\uffbf\071\uffbf\001\002" +
    "\000\004\037\211\001\002\000\004\037\210\001\002\000" +
    "\046\003\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\042\uffc1\067\uffc1\070\uffc1\071\uffc1\001\002" +
    "\000\004\071\033\001\002\000\046\003\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\042\uffc2\067" +
    "\uffc2\070\uffc2\071\uffc2\001\002\000\004\071\033\001\002" +
    "\000\016\003\077\030\100\031\073\032\074\033\103\034" +
    "\076\001\002\000\050\037\uffb0\040\uffb0\041\uffb0\044\uffb0" +
    "\046\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\001\002\000\046\003\uffbe\011\uffbe\012" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\042\uffbe\067" +
    "\uffbe\070\uffbe\071\uffbe\001\002\000\046\003\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\042\uffc0" +
    "\067\uffc0\070\uffc0\071\uffc0\001\002\000\046\003\uff93\011" +
    "\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93" +
    "\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\042" +
    "\uff93\067\uff93\070\uff93\071\uff93\001\002\000\046\003\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\042\uffbd\067\uffbd\070\uffbd\071\uffbd\001\002\000\004\037" +
    "\071\001\002\000\004\042\070\001\002\000\004\037\067" +
    "\001\002\000\004\037\066\001\002\000\050\037\uffb1\040" +
    "\uffb1\041\uffb1\044\uffb1\046\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\001\002\000\046" +
    "\003\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\042\uffc3\067\uffc3\070\uffc3\071\uffc3\001\002\000" +
    "\046\003\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\042\uffb5\067\uffb5\070\uffb5\071\uffb5\001\002" +
    "\000\060\002\uffcc\003\uffcc\005\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\042\uffcc\067\uffcc\070\uffcc\071\uffcc\001\002\000\046" +
    "\003\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\042\uffb3\067\uffb3\070\uffb3\071\uffb3\001\002\000" +
    "\010\044\uffed\045\204\071\uffed\001\002\000\010\044\uffea" +
    "\045\uffea\071\uffea\001\002\000\010\044\uffe8\045\uffe8\071" +
    "\uffe8\001\002\000\006\044\uffe6\071\uffe6\001\002\000\010" +
    "\044\uffe7\045\uffe7\071\uffe7\001\002\000\004\037\202\001" +
    "\002\000\010\044\uffeb\045\uffeb\071\uffeb\001\002\000\004" +
    "\071\104\001\002\000\006\044\uffec\071\uffec\001\002\000" +
    "\010\044\uffe9\045\uffe9\071\uffe9\001\002\000\006\036\105" +
    "\037\uffde\001\002\000\034\014\027\016\031\043\111\047" +
    "\114\052\130\066\113\071\033\072\122\073\127\074\137" +
    "\075\123\076\110\077\140\001\002\000\004\037\107\001" +
    "\002\000\046\003\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\042\uffe1\067\uffe1\070\uffe1\071\uffe1" +
    "\001\002\000\050\037\uffef\040\uffef\041\uffef\044\uffef\046" +
    "\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef" +
    "\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064" +
    "\uffef\065\uffef\001\002\000\032\014\027\016\031\043\111" +
    "\052\130\066\113\071\033\072\122\073\127\074\137\075" +
    "\123\076\110\077\140\001\002\000\050\037\uff7f\040\uff7f" +
    "\041\uff7f\044\uff7f\046\uff7f\050\uff7f\051\uff7f\052\uff7f\053" +
    "\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f" +
    "\062\uff7f\063\uff7f\064\uff7f\065\uff7f\001\002\000\032\014" +
    "\027\016\031\043\111\052\130\066\113\071\033\072\122" +
    "\073\127\074\137\075\123\076\110\077\140\001\002\000" +
    "\034\014\027\016\031\043\111\050\uffd1\052\130\066\113" +
    "\071\033\072\122\073\127\074\137\075\123\076\110\077" +
    "\140\001\002\000\020\037\uff8c\040\uff8c\041\uff8c\044\uff8c" +
    "\046\uff8c\050\uff8c\065\167\001\002\000\050\037\uff92\040" +
    "\uff92\041\uff92\044\uff92\046\uff92\050\uff92\051\uff92\052\uff92" +
    "\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\064\uff92\065\uff92\001\002\000\050" +
    "\037\uff7d\040\uff7d\041\uff7d\044\uff7d\046\uff7d\050\uff7d\051" +
    "\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d" +
    "\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\001" +
    "\002\000\006\037\uffdd\044\uffdd\001\002\000\026\037\uff88" +
    "\040\uff88\041\uff88\044\uff88\046\uff88\050\uff88\056\163\063" +
    "\165\064\uff88\065\uff88\001\002\000\050\037\ufff1\040\ufff1" +
    "\041\ufff1\044\ufff1\046\ufff1\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\062\ufff1\063\ufff1\064\ufff1\065\ufff1\001\002\000\050\037" +
    "\ufff3\040\ufff3\041\ufff3\044\ufff3\046\ufff3\050\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\001\002" +
    "\000\050\037\uff91\040\uff91\041\uff91\044\uff91\046\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91" +
    "\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065" +
    "\uff91\001\002\000\042\037\uff84\040\uff84\041\uff84\044\uff84" +
    "\046\uff84\050\uff84\051\160\052\161\056\uff84\057\uff84\060" +
    "\uff84\061\uff84\062\uff84\063\uff84\064\uff84\065\uff84\001\002" +
    "\000\036\037\uff86\040\uff86\041\uff86\044\uff86\046\uff86\050" +
    "\uff86\056\uff86\057\152\060\155\061\153\062\151\063\uff86" +
    "\064\uff86\065\uff86\001\002\000\050\037\ufff0\040\ufff0\041" +
    "\ufff0\044\ufff0\046\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062" +
    "\ufff0\063\ufff0\064\ufff0\065\ufff0\001\002\000\026\014\027" +
    "\016\031\043\111\071\033\072\122\073\127\074\137\075" +
    "\123\076\110\077\140\001\002\000\022\037\uff8a\040\uff8a" +
    "\041\uff8a\044\uff8a\046\uff8a\050\uff8a\064\146\065\uff8a\001" +
    "\002\000\050\037\uff90\040\uff90\041\uff90\044\uff90\046\uff90" +
    "\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056" +
    "\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90" +
    "\065\uff90\001\002\000\016\037\uff8e\040\uff8e\041\uff8e\044" +
    "\uff8e\046\uff8e\050\uff8e\001\002\000\006\037\uffdf\044\uffdf" +
    "\001\002\000\050\037\uff82\040\uff82\041\uff82\044\uff82\046" +
    "\uff82\050\uff82\051\uff82\052\uff82\053\144\054\143\055\142" +
    "\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064" +
    "\uff82\065\uff82\001\002\000\006\037\uffdc\044\uffdc\001\002" +
    "\000\050\037\ufff2\040\ufff2\041\ufff2\044\ufff2\046\ufff2\050" +
    "\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2" +
    "\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065" +
    "\ufff2\001\002\000\050\037\uffee\040\uffee\041\uffee\044\uffee" +
    "\046\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055" +
    "\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee" +
    "\064\uffee\065\uffee\001\002\000\032\014\027\016\031\043" +
    "\111\052\130\066\113\071\033\072\122\073\127\074\137" +
    "\075\123\076\110\077\140\001\002\000\032\014\uff72\016" +
    "\uff72\043\uff72\052\uff72\066\uff72\071\uff72\072\uff72\073\uff72" +
    "\074\uff72\075\uff72\076\uff72\077\uff72\001\002\000\032\014" +
    "\uff73\016\uff73\043\uff73\052\uff73\066\uff73\071\uff73\072\uff73" +
    "\073\uff73\074\uff73\075\uff73\076\uff73\077\uff73\001\002\000" +
    "\032\014\uff74\016\uff74\043\uff74\052\uff74\066\uff74\071\uff74" +
    "\072\uff74\073\uff74\074\uff74\075\uff74\076\uff74\077\uff74\001" +
    "\002\000\042\037\uff83\040\uff83\041\uff83\044\uff83\046\uff83" +
    "\050\uff83\051\uff83\052\uff83\056\uff83\057\uff83\060\uff83\061" +
    "\uff83\062\uff83\063\uff83\064\uff83\065\uff83\001\002\000\032" +
    "\014\027\016\031\043\111\052\130\066\113\071\033\072" +
    "\122\073\127\074\137\075\123\076\110\077\140\001\002" +
    "\000\020\037\uff8b\040\uff8b\041\uff8b\044\uff8b\046\uff8b\050" +
    "\uff8b\065\uff8b\001\002\000\050\037\uff80\040\uff80\041\uff80" +
    "\044\uff80\046\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054" +
    "\uff80\055\uff80\056\uff80\057\uff80\060\uff80\061\uff80\062\uff80" +
    "\063\uff80\064\uff80\065\uff80\001\002\000\032\014\uff7a\016" +
    "\uff7a\043\uff7a\052\uff7a\066\uff7a\071\uff7a\072\uff7a\073\uff7a" +
    "\074\uff7a\075\uff7a\076\uff7a\077\uff7a\001\002\000\032\014" +
    "\uff77\016\uff77\043\uff77\052\uff77\066\uff77\071\uff77\072\uff77" +
    "\073\uff77\074\uff77\075\uff77\076\uff77\077\uff77\001\002\000" +
    "\032\014\uff78\016\uff78\043\uff78\052\uff78\066\uff78\071\uff78" +
    "\072\uff78\073\uff78\074\uff78\075\uff78\076\uff78\077\uff78\001" +
    "\002\000\032\014\027\016\031\043\111\052\130\066\113" +
    "\071\033\072\122\073\127\074\137\075\123\076\110\077" +
    "\140\001\002\000\032\014\uff79\016\uff79\043\uff79\052\uff79" +
    "\066\uff79\071\uff79\072\uff79\073\uff79\074\uff79\075\uff79\076" +
    "\uff79\077\uff79\001\002\000\026\037\uff87\040\uff87\041\uff87" +
    "\044\uff87\046\uff87\050\uff87\056\uff87\063\uff87\064\uff87\065" +
    "\uff87\001\002\000\032\014\027\016\031\043\111\052\130" +
    "\066\113\071\033\072\122\073\127\074\137\075\123\076" +
    "\110\077\140\001\002\000\032\014\uff76\016\uff76\043\uff76" +
    "\052\uff76\066\uff76\071\uff76\072\uff76\073\uff76\074\uff76\075" +
    "\uff76\076\uff76\077\uff76\001\002\000\032\014\uff75\016\uff75" +
    "\043\uff75\052\uff75\066\uff75\071\uff75\072\uff75\073\uff75\074" +
    "\uff75\075\uff75\076\uff75\077\uff75\001\002\000\036\037\uff85" +
    "\040\uff85\041\uff85\044\uff85\046\uff85\050\uff85\056\uff85\057" +
    "\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85" +
    "\001\002\000\032\014\uff7b\016\uff7b\043\uff7b\052\uff7b\066" +
    "\uff7b\071\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b" +
    "\077\uff7b\001\002\000\032\014\027\016\031\043\111\052" +
    "\130\066\113\071\033\072\122\073\127\074\137\075\123" +
    "\076\110\077\140\001\002\000\032\014\uff7c\016\uff7c\043" +
    "\uff7c\052\uff7c\066\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c" +
    "\075\uff7c\076\uff7c\077\uff7c\001\002\000\022\037\uff89\040" +
    "\uff89\041\uff89\044\uff89\046\uff89\050\uff89\064\uff89\065\uff89" +
    "\001\002\000\032\014\027\016\031\043\111\052\130\066" +
    "\113\071\033\072\122\073\127\074\137\075\123\076\110" +
    "\077\140\001\002\000\016\037\uff8d\040\uff8d\041\uff8d\044" +
    "\uff8d\046\uff8d\050\uff8d\001\002\000\006\044\uffd2\050\uffd2" +
    "\001\002\000\010\040\175\044\uffcf\050\uffcf\001\002\000" +
    "\004\050\174\001\002\000\006\037\uffd3\044\uffd3\001\002" +
    "\000\032\014\027\016\031\043\111\052\130\066\113\071" +
    "\033\072\122\073\127\074\137\075\123\076\110\077\140" +
    "\001\002\000\006\044\uffd0\050\uffd0\001\002\000\050\037" +
    "\uff81\040\uff81\041\uff81\044\uff81\046\uff81\050\uff81\051\uff81" +
    "\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81\060" +
    "\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\001\002" +
    "\000\004\044\201\001\002\000\050\037\uff7e\040\uff7e\041" +
    "\uff7e\044\uff7e\046\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e" +
    "\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e\062" +
    "\uff7e\063\uff7e\064\uff7e\065\uff7e\001\002\000\046\003\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\042\uffe0\067\uffe0\070\uffe0\071\uffe0\001\002\000\006\044" +
    "\uffe5\071\uffe5\001\002\000\004\046\205\001\002\000\006" +
    "\044\uffce\071\uffce\001\002\000\006\037\uffad\044\uffad\001" +
    "\002\000\006\037\uffac\044\uffac\001\002\000\046\003\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\042\uffc5\067\uffc5\070\uffc5\071\uffc5\001\002\000\046\003" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\042\uffb6\067\uffb6\070\uffb6\071\uffb6\001\002\000\032" +
    "\014\027\016\031\043\111\052\130\066\113\071\033\072" +
    "\122\073\127\074\137\075\123\076\110\077\140\001\002" +
    "\000\056\036\uffe2\037\uffe2\040\uffe2\041\uffe2\044\uffe2\046" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\067\uffe2\070\uffe2\001\002\000\004\046\215" +
    "\001\002\000\056\036\uffcd\037\uffcd\040\uffcd\041\uffcd\044" +
    "\uffcd\046\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063" +
    "\uffcd\064\uffcd\065\uffcd\067\uffcd\070\uffcd\001\002\000\004" +
    "\037\243\001\002\000\004\071\033\001\002\000\006\036" +
    "\105\037\uffde\001\002\000\004\037\222\001\002\000\032" +
    "\014\027\016\031\043\111\052\130\066\113\071\033\072" +
    "\122\073\127\074\137\075\123\076\110\077\140\001\002" +
    "\000\036\014\027\016\031\043\111\052\130\066\113\067" +
    "\052\070\050\071\033\072\122\073\127\074\137\075\123" +
    "\076\110\077\140\001\002\000\004\037\225\001\002\000" +
    "\040\014\uff8f\016\uff8f\043\uff8f\044\uff8f\052\uff8f\066\uff8f" +
    "\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075" +
    "\uff8f\076\uff8f\077\uff8f\001\002\000\004\044\241\001\002" +
    "\000\046\036\105\037\uff92\044\uffde\051\uff92\052\uff92\053" +
    "\uff92\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92" +
    "\062\uff92\063\uff92\064\uff92\065\uff92\067\237\070\236\001" +
    "\002\000\004\044\234\001\002\000\004\044\232\001\002" +
    "\000\006\003\020\042\022\001\002\000\046\003\uff95\011" +
    "\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95" +
    "\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\042" +
    "\uff95\067\uff95\070\uff95\071\uff95\001\002\000\006\003\020" +
    "\042\022\001\002\000\046\003\uff96\011\uff96\012\uff96\013" +
    "\uff96\014\uff96\015\uff96\016\uff96\017\uff96\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\042\uff96\067\uff96\070" +
    "\uff96\071\uff96\001\002\000\006\037\uffaa\044\uffaa\001\002" +
    "\000\006\037\uffab\044\uffab\001\002\000\006\037\uffa9\044" +
    "\uffa9\001\002\000\006\003\020\042\022\001\002\000\046" +
    "\003\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016" +
    "\uff94\017\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94" +
    "\027\uff94\042\uff94\067\uff94\070\uff94\071\uff94\001\002\000" +
    "\046\003\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\042\uffb7\067\uffb7\070\uffb7\071\uffb7\001\002" +
    "\000\006\025\uffcb\037\253\001\002\000\004\025\246\001" +
    "\002\000\004\043\247\001\002\000\032\014\027\016\031" +
    "\043\111\052\130\066\113\071\033\072\122\073\127\074" +
    "\137\075\123\076\110\077\140\001\002\000\004\044\251" +
    "\001\002\000\004\037\252\001\002\000\046\003\uff97\011" +
    "\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97" +
    "\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\042" +
    "\uff97\067\uff97\070\uff97\071\uff97\001\002\000\046\003\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\042\uffb8\067\uffb8\070\uffb8\071\uffb8\001\002\000\004\037" +
    "\262\001\002\000\032\014\027\016\031\043\111\052\130" +
    "\066\113\071\033\072\122\073\127\074\137\075\123\076" +
    "\110\077\140\001\002\000\004\044\257\001\002\000\010" +
    "\003\020\037\260\042\022\001\002\000\046\003\uff98\011" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98" +
    "\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\042" +
    "\uff98\067\uff98\070\uff98\071\uff98\001\002\000\046\003\uff99" +
    "\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017" +
    "\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\042\uff99\067\uff99\070\uff99\071\uff99\001\002\000\046\003" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\042\uffb9\067\uffb9\070\uffb9\071\uffb9\001\002\000\010" +
    "\023\uffc8\024\uffc8\042\uffc8\001\002\000\050\037\uffae\040" +
    "\uffae\041\uffae\044\uffae\046\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\064\uffae\065\uffae\001\002\000\014" +
    "\030\100\031\073\032\074\033\103\034\076\001\002\000" +
    "\004\044\267\001\002\000\050\037\uffa6\040\uffa6\041\uffa6" +
    "\044\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\001\002\000\046\003\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\042" +
    "\uffb4\067\uffb4\070\uffb4\071\uffb4\001\002\000\004\043\273" +
    "\001\002\000\050\037\uffaf\040\uffaf\041\uffaf\044\uffaf\046" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064" +
    "\uffaf\065\uffaf\001\002\000\034\014\027\016\031\043\111" +
    "\044\uffd1\052\130\066\113\071\033\072\122\073\127\074" +
    "\137\075\123\076\110\077\140\001\002\000\004\044\275" +
    "\001\002\000\050\037\uffa8\040\uffa8\041\uffa8\044\uffa8\046" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8" +
    "\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064" +
    "\uffa8\065\uffa8\001\002\000\004\037\302\001\002\000\032" +
    "\014\027\016\031\043\111\052\130\066\113\071\033\072" +
    "\122\073\127\074\137\075\123\076\110\077\140\001\002" +
    "\000\004\044\301\001\002\000\004\037\uffa7\001\002\000" +
    "\046\003\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\042\uffb2\067\uffb2\070\uffb2\071\uffb2\001\002" +
    "\000\046\003\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\042\uffbb\067\uffbb\070\uffbb\071\uffbb\001" +
    "\002\000\032\014\027\016\031\043\111\052\130\066\113" +
    "\071\033\072\122\073\127\074\137\075\123\076\110\077" +
    "\140\001\002\000\004\044\306\001\002\000\006\003\020" +
    "\042\022\001\002\000\052\003\uffa2\011\uffa2\012\uffa2\013" +
    "\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\311\021\312" +
    "\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\042" +
    "\uffa2\067\uffa2\070\uffa2\071\uffa2\001\002\000\046\003\uffa5" +
    "\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5" +
    "\042\uffa5\067\uffa5\070\uffa5\071\uffa5\001\002\000\006\003" +
    "\322\042\022\001\002\000\006\003\313\043\314\001\002" +
    "\000\004\037\321\001\002\000\032\014\027\016\031\043" +
    "\111\052\130\066\113\071\033\072\122\073\127\074\137" +
    "\075\123\076\110\077\140\001\002\000\004\044\316\001" +
    "\002\000\006\003\020\042\022\001\002\000\052\003\uffa2" +
    "\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\311\021\312\022\uffa2\023\uffa2\024\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\042\uffa2\067\uffa2\070\uffa2\071\uffa2\001" +
    "\002\000\046\003\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\027\uffa3\042\uffa3\067\uffa3\070\uffa3\071\uffa3" +
    "\001\002\000\046\003\uffa0\011\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\042\uffa0\067\uffa0\070\uffa0\071" +
    "\uffa0\001\002\000\050\003\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\017\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\037\324\042\uffcb\067\uffcb" +
    "\070\uffcb\071\uffcb\001\002\000\046\003\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\042\uffa4\067" +
    "\uffa4\070\uffa4\071\uffa4\001\002\000\046\003\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\042\uffa1" +
    "\067\uffa1\070\uffa1\071\uffa1\001\002\000\004\037\350\001" +
    "\002\000\032\014\027\016\031\043\111\052\130\066\113" +
    "\071\033\072\122\073\127\074\137\075\123\076\110\077" +
    "\140\001\002\000\004\044\330\001\002\000\004\042\331" +
    "\001\002\000\010\023\334\024\333\042\uff9a\001\002\000" +
    "\004\042\347\001\002\000\006\003\343\041\344\001\002" +
    "\000\034\003\335\014\027\016\031\043\111\052\130\066" +
    "\113\071\033\072\122\073\127\074\137\075\123\076\110" +
    "\077\140\001\002\000\004\037\342\001\002\000\004\041" +
    "\337\001\002\000\046\003\051\011\053\012\030\013\061" +
    "\014\027\015\026\016\031\017\025\022\023\023\uffc9\024" +
    "\uffc9\025\034\026\037\027\040\042\uffc9\067\052\070\050" +
    "\071\033\001\002\000\010\023\334\024\333\042\uff9a\001" +
    "\002\000\004\042\uff9e\001\002\000\004\042\uff9d\001\002" +
    "\000\004\037\346\001\002\000\042\003\051\011\053\012" +
    "\030\013\061\014\027\015\026\016\031\017\025\022\023" +
    "\025\034\026\037\027\040\042\uffc9\067\052\070\050\071" +
    "\033\001\002\000\004\042\uff9c\001\002\000\004\042\uff9b" +
    "\001\002\000\046\003\uff9f\011\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\017\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\042\uff9f\067\uff9f\070\uff9f\071" +
    "\uff9f\001\002\000\046\003\uffba\011\uffba\012\uffba\013\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\042\uffba\067\uffba\070\uffba" +
    "\071\uffba\001\002\000\006\003\020\042\022\001\002\000" +
    "\004\002\000\001\002\000\004\002\ufff4\001\002\000\004" +
    "\006\355\001\002\000\004\043\356\001\002\000\016\030" +
    "\100\031\073\032\074\033\103\034\076\044\uffd7\001\002" +
    "\000\004\044\uffd8\001\002\000\004\071\372\001\002\000" +
    "\004\044\365\001\002\000\006\040\363\044\uffd5\001\002" +
    "\000\014\030\100\031\073\032\074\033\103\034\076\001" +
    "\002\000\004\044\uffd6\001\002\000\004\007\366\001\002" +
    "\000\016\030\100\031\073\032\074\033\103\034\076\035" +
    "\367\001\002\000\006\003\uffd9\042\uffd9\001\002\000\004" +
    "\071\371\001\002\000\006\003\uffda\042\uffda\001\002\000" +
    "\006\040\uffd4\044\uffd4\001\002\000\004\037\u0101\001\002" +
    "\000\004\071\375\001\002\000\004\036\376\001\002\000" +
    "\016\072\122\073\127\074\137\075\123\076\110\077\140" +
    "\001\002\000\004\037\u0100\001\002\000\012\003\ufffb\004" +
    "\ufffb\005\ufffb\010\ufffb\001\002\000\012\003\ufffa\004\ufffa" +
    "\005\ufffa\010\ufffa\001\002\000\012\003\ufff9\004\ufff9\005" +
    "\ufff9\010\ufff9\001\002\000\006\005\ufffc\010\ufffc\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\012\002\003\003\010\004\004\005\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\u0102" +
    "\005\005\001\001\000\002\001\001\000\012\012\373\013" +
    "\071\014\101\015\074\001\001\000\012\006\013\007\012" +
    "\023\015\024\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\351\001\001\000\004\035\020\001\001" +
    "\000\010\007\016\023\015\024\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\016\042" +
    "\017\034\020\056\036\061\037\041\040\031\041\023\042" +
    "\035\043\045\044\063\045\044\046\064\047\062\050\053" +
    "\051\046\053\055\055\043\056\054\057\057\060\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\016\042\017\034\020\056" +
    "\037\262\040\031\041\023\042\035\043\045\044\063\045" +
    "\044\046\064\047\062\050\053\051\046\053\055\055\043" +
    "\056\054\057\057\060\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\237\001\001\000\002\001\001" +
    "\000\004\035\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\042\017\206\001\001\000\002\001\001" +
    "\000\006\016\042\017\205\001\001\000\012\012\100\013" +
    "\071\014\101\015\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\105\001\001\000\046\011\131\016\042" +
    "\017\115\022\133\030\117\043\123\046\064\050\053\061" +
    "\135\062\116\064\132\065\114\066\130\067\120\070\125" +
    "\071\124\072\134\073\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\011\131\016\042" +
    "\017\115\043\123\046\064\050\053\062\116\064\177\065" +
    "\114\066\130\067\120\070\125\071\124\072\134\073\111" +
    "\001\001\000\002\001\001\000\024\011\131\016\042\017" +
    "\115\043\123\046\064\050\053\062\116\072\176\073\111" +
    "\001\001\000\046\011\131\016\042\017\115\031\172\032" +
    "\170\043\123\046\064\050\053\061\171\062\116\064\132" +
    "\065\114\066\130\067\120\070\125\071\124\072\134\073" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\076\156\001\001\000\004\075\153\001\001\000\002\001" +
    "\001\000\022\011\131\016\042\017\115\043\123\046\064" +
    "\050\053\062\116\073\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\077\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\011\131\016\042\017\115\043\123" +
    "\046\064\050\053\062\116\071\144\072\134\073\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\011\131\016\042\017\115\043" +
    "\123\046\064\050\053\062\116\065\146\066\130\067\120" +
    "\070\125\071\124\072\134\073\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\011\131\016\042\017\115\043" +
    "\123\046\064\050\053\062\116\067\155\070\125\071\124" +
    "\072\134\073\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\011\131\016\042\017\115\043\123\046\064" +
    "\050\053\062\116\070\161\071\124\072\134\073\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\011\131\016\042\017\115\043" +
    "\123\046\064\050\053\062\116\066\165\067\120\070\125" +
    "\071\124\072\134\073\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\011\131\016\042\017\115\043\123" +
    "\046\064\050\053\062\116\064\167\065\114\066\130\067" +
    "\120\070\125\071\124\072\134\073\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\011\131\016\042\017\115" +
    "\032\175\043\123\046\064\050\053\061\171\062\116\064" +
    "\132\065\114\066\130\067\120\070\125\071\124\072\134" +
    "\073\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\011\131\016\042\017\115\043\123\046\064\050" +
    "\053\061\213\062\116\064\132\065\114\066\130\067\120" +
    "\070\125\071\124\072\134\073\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\042\017\217\045\220\001\001\000\004\021" +
    "\237\001\001\000\002\001\001\000\044\011\131\016\042" +
    "\017\115\043\123\046\064\050\053\061\223\062\116\063" +
    "\222\064\132\065\114\066\130\067\120\070\125\071\124" +
    "\072\134\073\111\001\001\000\050\011\131\016\042\017" +
    "\226\043\123\044\230\045\227\046\064\050\053\061\223" +
    "\062\116\063\225\064\132\065\114\066\130\067\120\070" +
    "\125\071\124\072\134\073\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\232" +
    "\001\001\000\002\001\001\000\004\035\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\011\131\016\042\017\115\043\123\046" +
    "\064\050\053\061\247\062\116\064\132\065\114\066\130" +
    "\067\120\070\125\071\124\072\134\073\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\011\131\016\042\017" +
    "\115\043\123\046\064\050\053\061\255\062\116\064\132" +
    "\065\114\066\130\067\120\070\125\071\124\072\134\073" +
    "\111\001\001\000\002\001\001\000\004\035\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\265\013\071" +
    "\014\101\015\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\011\131\016\042\017\115\031\273\032\170\043" +
    "\123\046\064\050\053\061\171\062\116\064\132\065\114" +
    "\066\130\067\120\070\125\071\124\072\134\073\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\011\131\016\042\017\115\043\123\046\064\050" +
    "\053\061\277\062\116\064\132\065\114\066\130\067\120" +
    "\070\125\071\124\072\134\073\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\011\131\016\042\017\115\043\123\046\064\050" +
    "\053\061\304\062\116\064\132\065\114\066\130\067\120" +
    "\070\125\071\124\072\134\073\111\001\001\000\002\001" +
    "\001\000\004\035\306\001\001\000\004\052\307\001\001" +
    "\000\002\001\001\000\004\035\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\011\131\016\042\017\115" +
    "\043\123\046\064\050\053\061\314\062\116\064\132\065" +
    "\114\066\130\067\120\070\125\071\124\072\134\073\111" +
    "\001\001\000\002\001\001\000\004\035\316\001\001\000" +
    "\004\052\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\011\131\016\042\017\115\043\123" +
    "\046\064\050\053\061\326\062\116\064\132\065\114\066" +
    "\130\067\120\070\125\071\124\072\134\073\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\011\131" +
    "\016\042\017\115\043\123\046\064\050\053\061\335\062" +
    "\116\064\132\065\114\066\130\067\120\070\125\071\124" +
    "\072\134\073\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\016\042\017\034\020\056\036\337\037\041" +
    "\040\031\041\023\042\035\043\045\044\063\045\044\046" +
    "\064\047\062\050\053\051\046\053\055\055\043\056\054" +
    "\057\057\060\040\001\001\000\004\054\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\016\042\017\034\020\056\036\344\037\041\040\031\041" +
    "\023\042\035\043\045\044\063\045\044\046\064\047\062" +
    "\050\053\051\046\053\055\055\043\056\054\057\057\060" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\352\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\012\357\013\071\014\101\015\074\025" +
    "\360\026\356\027\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\357\013\071\014\101\015\074\026\363\027\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\367\013" +
    "\071\014\101\015\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\376" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	StringBuilder sb = new StringBuilder();
	
	/*Error reporting*/
	public void report_error(String message, Object info) {
		sb.append("Error: ");
		
		/*Code borrowed from ycalc.cup*/
        if (info instanceof java_cup.runtime.Symbol) 
		{
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
			/*Line number*/
            if (s.left >= 0) 
			{                
                sb.append("Line " +(s.left+1));   
            }
        }
		 
		sb.append(" - " +message);
	}   
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}
	
	public void addText(String text)
	{
		sb.append(text);
		//sb.append(" - Line " + MainConyo.s.lineNo());
		sb.append("\t\n");
	}
	public void printText()
	{
		if(sb.length() > 0)
			System.out.println(sb);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= conyogram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Conyogram start_val = (Conyogram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // conyogram ::= OMG_section yaya_section super_yaya 
            {
              Conyogram RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		OMG_section o = (OMG_section)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		yaya_section y = (yaya_section)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		super_yaya p = (super_yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					RESULT = new Conyogram(o, y, p);
					printText(); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conyogram",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OMG_section ::= OMG_list 
            {
              OMG_section RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OMG_list o = (OMG_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OMG_section.OMGSection(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_section",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OMG_section ::= 
            {
              OMG_section RESULT =null;
		 RESULT = new OMG_section.OMGSection(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_section",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OMG_list ::= OMG_dec 
            {
              OMG_list RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OMG_dec o = (OMG_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OMG_list.OMGList(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OMG_list ::= OMG_dec OMG_list 
            {
              OMG_list RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OMG_dec o = (OMG_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OMG_list l = (OMG_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OMG_list.OMGList(o, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OMG_dec ::= OMG data_type IDENTIFIER MAKE_KUHA literal DB 
            {
              OMG_dec RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		data_type dt = (data_type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		literal l = (literal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new OMG_dec.OMG(dt, id, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OMG_dec ::= OMG error DB 
            {
              OMG_dec RESULT =null;
		 RESULT = null; addText(" in Constant Declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OMG_dec ::= error DB 
            {
              OMG_dec RESULT =null;
		 RESULT = null; addText(" before main and function declarations"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // yaya_section ::= yaya_list 
            {
              yaya_section RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_list l = (yaya_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_section.yayaSection(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_section",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // yaya_section ::= 
            {
              yaya_section RESULT =null;
		 RESULT = new yaya_section.yayaSection(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_section",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // yaya_list ::= yaya 
            {
              yaya_list RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya y = (yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_list.yayaList(y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // yaya_list ::= yaya yaya_list 
            {
              yaya_list RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		yaya y = (yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_list l = (yaya_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_list.yayaList(y, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // super_yaya ::= SUPER_YAYA utos_block 
            {
              super_yaya RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new super_yaya.superYaya(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("super_yaya",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literal ::= INT_LITERAL 
            {
              literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal.Inty(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= FLOAT_LITERAL 
            {
              literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal.Floaty(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= STRING_LITERAL 
            {
              literal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal.Stringy(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= CHAR_LITERAL 
            {
              literal RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal.Chary(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= BOOL_LITERAL 
            {
              literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal.Booly(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= WALEY 
            {
              literal RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal.Waley(w); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // data_type ::= primitive_dt 
            {
              data_type RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		primitive_dt p = (primitive_dt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new data_type.datatypePrimitive(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // data_type ::= reference_dt 
            {
              data_type RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		reference_dt r = (reference_dt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new data_type.datatypeReference(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // primitive_dt ::= INTY 
            {
              primitive_dt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new primitive_dt.intType(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // primitive_dt ::= FLOATY 
            {
              primitive_dt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new primitive_dt.floatType(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // primitive_dt ::= STRINGY 
            {
              primitive_dt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new primitive_dt.stringType(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // primitive_dt ::= CHARY 
            {
              primitive_dt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new primitive_dt.charType(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // primitive_dt ::= BOOLY 
            {
              primitive_dt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new primitive_dt.booleanType(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // reference_dt ::= array_dt 
            {
              reference_dt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		array_dt a = (array_dt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new reference_dt.referenceArray(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reference_dt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // array_dt ::= primitive_dt brackets 
            {
              array_dt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		primitive_dt p = (primitive_dt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		brackets b = (brackets)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new array_dt.arrayPrimitive(p, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valid_name ::= IDENTIFIER 
            {
              valid_name RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new valid_name.identifier(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_name",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valid_var ::= valid_name 
            {
              valid_var RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		valid_name vn = (valid_name)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new valid_var.validVar(vn); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_var",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valid_var ::= valid_name ref_brackets 
            {
              valid_var RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		valid_name vn = (valid_name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ref_brackets rb = (ref_brackets)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new valid_var.validVarRB(vn, rb); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_var",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arte_dec ::= MAKE_ARTE data_type IDENTIFIER arte_assign DB 
            {
              arte_dec RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		data_type dt = (data_type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arte_assign a = (arte_assign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new arte_dec.arteDec(dt, id, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arte_dec ::= MAKE_ARTE error DB 
            {
              arte_dec RESULT =null;
		 RESULT = null; addText(" in Variable Declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_dec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arte_assign ::= MAKE_KUHA arte_init 
            {
              arte_assign RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_init i = (arte_init)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arte_assign.arteAssign(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_assign",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arte_assign ::= 
            {
              arte_assign RESULT =null;
		 RESULT = new arte_assign.arteAssign(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_assign",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arte_init ::= array_init 
            {
              arte_init RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		array_init a = (array_init)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arte_init.arrayInit(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arte_init ::= sabi_sabi 
            {
              arte_init RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arte_init.sabiInit(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // yaya ::= yaya_header utos_block 
            {
              yaya RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		yaya_header h = (yaya_header)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya.addYaya(h, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // yaya_header ::= HIRE_YAYA IDENTIFIER BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK data_type IDENTIFIER 
            {
              yaya_header RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ypsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ypsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		yaya_param_sec yps = (yaya_param_sec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		data_type dt = (data_type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_header.yayaHeader(id, yps, dt, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_header",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // yaya_header ::= HIRE_YAYA IDENTIFIER BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK POOR 
            {
              yaya_header RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ypsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ypsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		yaya_param_sec yps = (yaya_param_sec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new yaya_header.yayaHeader(id, yps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_header",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // yaya_param_sec ::= yaya_param_list 
            {
              yaya_param_sec RESULT =null;
		int yplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_param_list ypl = (yaya_param_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_param_sec.yayaParamSec(ypl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_sec",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // yaya_param_sec ::= 
            {
              yaya_param_sec RESULT =null;
		 RESULT = new yaya_param_sec.yayaParamSec(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_sec",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // yaya_param_list ::= yaya_param COMMA yaya_param_list 
            {
              yaya_param_list RESULT =null;
		int ypleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ypright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		yaya_param yp = (yaya_param)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_param_list ypl = (yaya_param_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_param_list.yayaParamList(yp, ypl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // yaya_param_list ::= yaya_param 
            {
              yaya_param_list RESULT =null;
		int ypleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ypright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_param yp = (yaya_param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_param_list.yayaParamList(yp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // yaya_param ::= data_type IDENTIFIER 
            {
              yaya_param RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		data_type dt = (data_type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_param.yayaParam(dt, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // array_init ::= LEFT_CURLY arte_init_list RIGHT_CURLY 
            {
              array_init RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arte_init_list l = (arte_init_list)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new array_init.arrayInit(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_init",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arte_init_list ::= arte_init_opt 
            {
              arte_init_list RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_init_opt o = (arte_init_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arte_init_list.arteInitList(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arte_init_list ::= 
            {
              arte_init_list RESULT =null;
		 RESULT = new arte_init_list.arteInitList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arte_init_opt ::= sabi_sabi COMMA arte_init_opt 
            {
              arte_init_opt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_init_opt o = (arte_init_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arte_init_opt.arteInitOpt(s, o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_opt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arte_init_opt ::= sabi_sabi 
            {
              arte_init_opt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arte_init_opt.arteInitOpt(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_opt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // brackets ::= LEFT_BRACE RIGHT_BRACE 
            {
              brackets RESULT =null;
		 RESULT = new brackets(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ref_brackets ::= LEFT_BRACE sabi_sabi RIGHT_BRACE 
            {
              ref_brackets RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ref_brackets.refBrackets(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref_brackets",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // utos_block ::= DOLLAR_SIGN utos_block_opt DOLLAR_SIGN 
            {
              utos_block RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_block_opt opt = (utos_block_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_block.utosBlock(opt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // utos_block ::= error 
            {
              utos_block RESULT =null;
		 RESULT = null; addText(" in code block"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // utos_block_opt ::= block_content 
            {
              utos_block_opt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		block_content b = (block_content)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_block_opt.utosBlockOpt(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block_opt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // utos_block_opt ::= 
            {
              utos_block_opt RESULT =null;
		 RESULT = new utos_block_opt.utosBlockOpt(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block_opt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // block_content ::= utos_dec block_content 
            {
              block_content RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_dec u = (utos_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		block_content b = (block_content)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new block_content.blockContent(u, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // block_content ::= utos_dec 
            {
              block_content RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_dec u = (utos_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new block_content.blockContent(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // utos_dec ::= utos_dec_db 
            {
              utos_dec RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_dec_db d = (utos_dec_db)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec.utosDecDB(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // utos_dec ::= utos_dec_val DB 
            {
              utos_dec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_dec_val v = (utos_dec_val)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_dec.utosDecVal(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // utos_dec ::= utos_dec_nodb 
            {
              utos_dec RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_dec_nodb n = (utos_dec_nodb)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec.utosDecNoDB(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // utos_dec ::= utos_sabisabi DB 
            {
              utos_dec RESULT =null;
		int usleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int usright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_sabisabi us = (utos_sabisabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_dec.utosDecSabiSabi(us); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // utos_dec ::= error 
            {
              utos_dec RESULT =null;
		 RESULT = null; addText(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // utos_dec_nodb ::= utos_likeKapag 
            {
              utos_dec_nodb RESULT =null;
		int ukleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ukright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_likeKapag uk = (utos_likeKapag)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_nodb.utosLikeKapag(uk); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // utos_dec_nodb ::= utos_makePalit 
            {
              utos_dec_nodb RESULT =null;
		int upleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int upright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makePalit up = (utos_makePalit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_nodb.utosMakePalit(up); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // utos_dec_nodb ::= utos_likeHabang 
            {
              utos_dec_nodb RESULT =null;
		int uhleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uhright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_likeHabang uh = (utos_likeHabang)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_nodb.utosLikeHabang(uh); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // utos_dec_nodb ::= utos_makeGawaHabang 
            {
              utos_dec_nodb RESULT =null;
		int ughleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ughright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeGawaHabang ugh = (utos_makeGawaHabang)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_nodb.utosMakeGawaHabang(ugh); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // utos_dec_nodb ::= utos_makeUlit 
            {
              utos_dec_nodb RESULT =null;
		int uuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeUlit uu = (utos_makeUlit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_nodb.utosMakeUlit(uu); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // utos_dec_nodb ::= utos_makeArte 
            {
              utos_dec_nodb RESULT =null;
		int ualeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeArte ua = (utos_makeArte)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_nodb.utosMakeArte(ua); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // utos_dec_nodb ::= LIKE_KAPAG error 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in IF statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // utos_dec_nodb ::= MAKE_PALIT error DB 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in SWITCH statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // utos_dec_nodb ::= LIKE_HABANG error DB 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in WHILE LOOP"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // utos_dec_nodb ::= MAKE_GAWA error DB 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in DO WHILE LOOP"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // utos_dec_nodb ::= MAKE_ULIT error DB 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in FOR LOOP"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // utos_dec_db ::= utos_makeKuha DB 
            {
              utos_dec_db RESULT =null;
		int ukleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ukright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_makeKuha uk = (utos_makeKuha)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_dec_db.utosMakeKuha(uk); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // utos_dec_db ::= utos_makeSulat DB 
            {
              utos_dec_db RESULT =null;
		int usuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int usuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_makeSulat usu = (utos_makeSulat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_dec_db.utosMakeSulat(usu); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // utos_dec_db ::= BREAKUP DB 
            {
              utos_dec_db RESULT =null;
		 RESULT = new utos_dec_db.breakup(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // utos_dec_db ::= MAKEUP DB 
            {
              utos_dec_db RESULT =null;
		 RESULT = new utos_dec_db.makeup(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // utos_dec_db ::= MAKE_SULAT error DB 
            {
              utos_dec_db RESULT =null;
		 RESULT = null; addText(" in OUTPUT function"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // utos_dec_val ::= utos_makeTawag 
            {
              utos_dec_val RESULT =null;
		int utleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeTawag ut = (utos_makeTawag)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_val.utosMakeTawag(ut); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // utos_dec_val ::= utos_makeBasa 
            {
              utos_dec_val RESULT =null;
		int ubleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ubright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeBasa ub = (utos_makeBasa)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_val.utosMakeBasa(ub); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // utos_dec_val ::= MAKE_TAWAG error 
            {
              utos_dec_val RESULT =null;
		 RESULT = null; addText(" in FUNCTION CALL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // utos_dec_val ::= MAKE_BASA error 
            {
              utos_dec_val RESULT =null;
		 RESULT = null; addText(" in SCAN function"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // utos_sabisabi ::= POS_INC valid_var 
            {
              utos_sabisabi RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		valid_var vv = (valid_var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_sabisabi.utosSabiSabiFront(vv,"++"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_sabisabi",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // utos_sabisabi ::= NEG_INC valid_var 
            {
              utos_sabisabi RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		valid_var vv = (valid_var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_sabisabi.utosSabiSabiFront(vv,"--"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_sabisabi",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // utos_sabisabi ::= valid_var POS_INC 
            {
              utos_sabisabi RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		valid_var vv = (valid_var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_sabisabi.utosSabiSabiBack(vv,"++"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_sabisabi",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // utos_sabisabi ::= valid_var NEG_INC 
            {
              utos_sabisabi RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		valid_var vv = (valid_var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_sabisabi.utosSabiSabiBack(vv,"--"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_sabisabi",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // utos_makeKuha ::= valid_var arte_assign 
            {
              utos_makeKuha RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		valid_var vv = (valid_var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_assign a = (arte_assign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_makeKuha.makeKuha(vv, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeKuha",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // utos_makeTawag ::= MAKE_TAWAG valid_name LEFT_PAREN arte_init_list RIGHT_PAREN 
            {
              utos_makeTawag RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		valid_name vn = (valid_name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arte_init_list l = (arte_init_list)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_makeTawag.makeTawag(vn, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeTawag",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // utos_makeSulat ::= MAKE_SULAT LEFT_PAREN sabi_sabi RIGHT_PAREN 
            {
              utos_makeSulat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_makeSulat.makeSulat(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeSulat",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // utos_makeBasa ::= MAKE_BASA LEFT_PAREN data_type RIGHT_PAREN 
            {
              utos_makeBasa RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		data_type d = (data_type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_makeBasa.makeBasa(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeBasa",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // utos_likeKapag ::= LIKE_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang 
            {
              utos_likeKapag RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_block b = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_thisNalang t = (utos_thisNalang)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_likeKapag.likeKapag(s, b, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeKapag",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // utos_thisNalang ::= THIS_NALANG utos_block 
            {
              utos_thisNalang RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block b = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_thisNalang.thisNalang(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // utos_thisNalang ::= THIS_NALANG_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang 
            {
              utos_thisNalang RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_block b = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_thisNalang t = (utos_thisNalang)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_thisNalang.thisNalangKapag(s, b, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // utos_thisNalang ::= 
            {
              utos_thisNalang RESULT =null;
		 RESULT = new utos_thisNalang.thisNalang(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // utos_thisNalang ::= THIS_NALANG error DB 
            {
              utos_thisNalang RESULT =null;
		 RESULT = null; addText(" in ELSE statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // utos_thisNalang ::= THIS_NALANG_KAPAG error DB 
            {
              utos_thisNalang RESULT =null;
		 RESULT = null; addText(" in ELSE IF statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // utos_makePalit ::= MAKE_PALIT LEFT_PAREN sabi_sabi RIGHT_PAREN DOLLAR_SIGN makePalit_MRW DOLLAR_SIGN 
            {
              utos_makePalit RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		makePalit_MRW m = (makePalit_MRW)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_makePalit.makePalit(s, m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makePalit",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // makePalit_MRW ::= MRW sabi_sabi COLON utos_block_opt makePalit_MRW 
            {
              makePalit_MRW RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_block_opt o = (utos_block_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		makePalit_MRW m = (makePalit_MRW)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new makePalit_MRW.MRW(s, o, m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // makePalit_MRW ::= MRW error DB 
            {
              makePalit_MRW RESULT =null;
		 RESULT = null; addText(" in one of the cases of a SWITCH statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // makePalit_MRW ::= MDR COLON utos_block_opt 
            {
              makePalit_MRW RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block_opt o = (utos_block_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new makePalit_MRW.MDR(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // makePalit_MRW ::= MDR error DB 
            {
              makePalit_MRW RESULT =null;
		 RESULT = null; addText(" in the last case of a SWITCH statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // makePalit_MRW ::= 
            {
              makePalit_MRW RESULT =null;
		 RESULT = new makePalit_MRW.MRW(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block 
            {
              utos_likeHabang RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_likeHabang.likeHabang(s, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB 
            {
              utos_likeHabang RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new utos_likeHabang.likeHabang(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // utos_makeGawaHabang ::= MAKE_GAWA utos_block LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB 
            {
              utos_makeGawaHabang RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new utos_makeGawaHabang.makeGawaHabang(u, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeGawaHabang",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for utos_makeKuha RIGHT_PAREN utos_block 
            {
              utos_makeUlit RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		utos_makeKuha m1 = (utos_makeKuha)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi_for s1 = (sabi_sabi_for)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		utos_makeKuha m2 = (utos_makeKuha)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_makeUlit.makeUlit(m1, s1, m2, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for utos_sabisabi RIGHT_PAREN utos_block 
            {
              utos_makeUlit RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		utos_makeKuha m1 = (utos_makeKuha)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi_for s1 = (sabi_sabi_for)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		utos_sabisabi m2 = (utos_sabisabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_makeUlit.makeUlit(m1, s1, m2, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for sabi_sabi_for RIGHT_PAREN utos_block 
            {
              utos_makeUlit RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		utos_makeKuha m1 = (utos_makeKuha)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi_for s1 = (sabi_sabi_for)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		sabi_sabi_for s2 = (sabi_sabi_for)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_makeUlit.makeUlit(m1, s1, s2, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // utos_makeArte ::= arte_dec 
            {
              utos_makeArte RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_dec a = (arte_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_makeArte.makeArte(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeArte",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sabi_sabi_end ::= valid_var 
            {
              sabi_sabi_end RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		valid_var v = (valid_var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sabi_sabi_end.ssEndValidVar(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sabi_sabi_end ::= utos_dec_val 
            {
              sabi_sabi_end RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_dec_val u = (utos_dec_val)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sabi_sabi_end.ssEndUtos(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sabi_sabi_end ::= literal 
            {
              sabi_sabi_end RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		literal l = (literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sabi_sabi_end.ssEndLiteral(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sabi_sabi_for ::= sabi_sabi DB 
            {
              sabi_sabi_for RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new sabi_sabi_for.SabiSabiFor(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_for",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sabi_sabi ::= ss_OR 
            {
              sabi_sabi RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_OR o = (ss_OR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sabi_sabi.SabiSabi(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ss_OR ::= ss_AND OR ss_OR 
            {
              ss_OR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_AND a = (ss_AND)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_OR o = (ss_OR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_OR.ssORExpansion(a, o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_OR",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ss_OR ::= ss_AND 
            {
              ss_OR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_AND a = (ss_AND)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_OR.ssOR(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_OR",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ss_AND ::= ss_equality AND ss_AND 
            {
              ss_AND RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_equality e = (ss_equality)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_AND a = (ss_AND)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_AND.ssANDExpansion(e, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_AND",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ss_AND ::= ss_equality 
            {
              ss_AND RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_equality e = (ss_equality)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_AND.ssAND(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_AND",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ss_equality ::= ss_comparison equality ss_equality 
            {
              ss_equality RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_comparison c = (ss_comparison)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		equality eq = (equality)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_equality e = (ss_equality)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_equality.ssEqualityExpansion(c, eq, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_equality",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ss_equality ::= ss_comparison 
            {
              ss_equality RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_comparison c = (ss_comparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_equality.ssEquality(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_equality",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ss_comparison ::= ss_a1 comparison ss_comparison 
            {
              ss_comparison RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_a1 a = (ss_a1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		comparison co = (comparison)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_comparison c = (ss_comparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_comparison.ssComparisonExpansion(a, co, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_comparison",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ss_comparison ::= ss_a1 
            {
              ss_comparison RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_a1 a = (ss_a1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_comparison.ssComparison(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_comparison",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ss_a1 ::= ss_a2 arithmetic_1 ss_a1 
            {
              ss_a1 RESULT =null;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_a2 a2 = (ss_a2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arithmetic_1 ar = (arithmetic_1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_a1 a1 = (ss_a1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_a1.ssA1Expansion(a2, ar, a1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a1",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ss_a1 ::= ss_a2 
            {
              ss_a1 RESULT =null;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_a2 a2 = (ss_a2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_a1.ssA1(a2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a1",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ss_a2 ::= ss_unary_1 arithmetic_2 ss_a2 
            {
              ss_a2 RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_unary_1 u = (ss_unary_1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arithmetic_2 ar = (arithmetic_2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_a2 a = (ss_a2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_a2.ssA2Expansion(u, ar, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a2",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ss_a2 ::= ss_unary_1 
            {
              ss_a2 RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_unary_1 u = (ss_unary_1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_a2.ssA2(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a2",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ss_unary_1 ::= NOT ss_unary_1 
            {
              ss_unary_1 RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_unary_1 u = (ss_unary_1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_unary_1.ssU1Not(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ss_unary_1 ::= MINUS ss_paren 
            {
              ss_unary_1 RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_paren p = (ss_paren)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_unary_1.ssU1Neg(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ss_unary_1 ::= ss_paren 
            {
              ss_unary_1 RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_paren p = (ss_paren)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_unary_1.ssU1(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ss_paren ::= LEFT_PAREN ss_OR RIGHT_PAREN 
            {
              ss_paren RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ss_OR a = (ss_OR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ss_paren.ssParen(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_paren",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ss_paren ::= sabi_sabi_end 
            {
              ss_paren RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sabi_sabi_end e = (sabi_sabi_end)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_paren.ssParenEnd(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_paren",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // equality ::= EQUAL_EQUAL 
            {
              equality RESULT =null;
		 RESULT = new equality.equal("=="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // equality ::= NOT_EQUAL 
            {
              equality RESULT =null;
		 RESULT = new equality.equal("<>"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // comparison ::= GT_EQUAL 
            {
              comparison RESULT =null;
		 RESULT = new comparison.compare(">="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // comparison ::= LT_EQUAL 
            {
              comparison RESULT =null;
		 RESULT = new comparison.compare("<="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // comparison ::= GREATER_THAN 
            {
              comparison RESULT =null;
		 RESULT = new comparison.compare(">"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // comparison ::= LESS_THAN 
            {
              comparison RESULT =null;
		 RESULT = new comparison.compare("<"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // arithmetic_1 ::= PLUS 
            {
              arithmetic_1 RESULT =null;
		 RESULT = new arithmetic_1.arithmetic1("+"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_1",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // arithmetic_1 ::= MINUS 
            {
              arithmetic_1 RESULT =null;
		 RESULT = new arithmetic_1.arithmetic1("-"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_1",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // arithmetic_2 ::= TIMES 
            {
              arithmetic_2 RESULT =null;
		 RESULT = new arithmetic_2.arithmetic2("*"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // arithmetic_2 ::= DIVIDE 
            {
              arithmetic_2 RESULT =null;
		 RESULT = new arithmetic_2.arithmetic2("/"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // arithmetic_2 ::= MODULO 
            {
              arithmetic_2 RESULT =null;
		 RESULT = new arithmetic_2.arithmetic2("%"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
