{"filter":false,"title":"SymList.java","tooltip":"/src/created/Sym/SymList.java","undoManager":{"mark":5,"position":5,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":20}},"text":"package created.Sym;"},{"action":"insertText","range":{"start":{"row":0,"column":20},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":99,"column":0}},"lines":["","import java.util.*;","import created.ParseTree.Array.*;","import created.ParseTree.Arte.*;","import created.ParseTree.Literals.*;","import created.ParseTree.Program.*;","import created.ParseTree.SabiSabi.*;","import created.ParseTree.SubYaya.*;","import created.ParseTree.Utos.*;","import created.ParseTree.Yaya.*;","","/**"," * A class to act as a list of symbols (variables, functions, etc.)."," * Based on SymTab class by Klein and Rumpe. (jflex examples, interpreter)"," */","public class SymList ","{","    Map <String, SymEntry> m;","    SymList anc; //ancestor symlist","    ","    /**","     * First constructor, no ancestor.","     */","    public SymList()","    {","        this(null);","    }","    ","    /**","     * Second constructor, w/ ancestor.","     * @param anc Ancestor SymList.","     */","    public SymList(SymList anc)","    {","        m = new HashMap<String, SymEntry>();","        this.anc = anc;","    }","    ","    /**","     * Add a new symbol to the list.","     * @param s Name of symbol.","     * @param se Symbol value.","     * @return ","     */","    public Boolean addToList(String s, SymEntry se)","    {","        SymEntry symbol = getSymbol(s);","        Boolean symbolAvail = (symbol == null); //if symbol is not taken","        if(symbolAvail)","        {","            m.put(s, se);","        }","        return symbolAvail;","    }","    ","    /**","     * Get a symbol from the list.","     * @param s Name of symbol.","     * @return Symbol with matching name.","     */","    public SymEntry getSymbol(String s)","    {","        SymEntry symbol = m.get(s);","        if(symbol == null && anc != null) ","        {","            symbol = anc.getSymbol(s);","        }","        return symbol;","    }","    ","    /**","     * Function for editing a symbol in the list.","     * @param s Name of symbol.","     * @param se New value for symbol.","     */","    public void editSymbol(String s, SymEntry se)","    {","        SymEntry symbol = m.get(s);","        Boolean symbolAvail = (symbol == null); //if symbol is not taken","        if(!symbolAvail)","        {","            m.put(s, se);","        }","    }","    ","    @Override","    public String toString()","    {","        StringBuilder sb = new StringBuilder();","        Iterator i = m.entrySet().iterator();","        while (i.hasNext()) ","        {","            Map.Entry inst = (Map.Entry)i.next();","            sb.append(inst.getKey()).append(\" - \").append(inst.getValue()).append(\"\\n\");","        }","        return sb.toString();","    }","}"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":99,"column":17},"end":{"row":99,"column":20}},"text":"ym;"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":99,"column":16},"end":{"row":99,"column":17}},"text":"S"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":99,"column":2},"end":{"row":99,"column":16}},"text":"ckage created."}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":100,"column":0},"end":{"row":198,"column":0}},"nl":"\n","lines":["","import java.util.*;","import created.ParseTree.Array.*;","import created.ParseTree.Arte.*;","import created.ParseTree.Literals.*;","import created.ParseTree.Program.*;","import created.ParseTree.SabiSabi.*;","import created.ParseTree.SubYaya.*;","import created.ParseTree.Utos.*;","import created.ParseTree.Yaya.*;","","/**"," * A class to act as a list of symbols (variables, functions, etc.)."," * Based on SymTab class by Klein and Rumpe. (jflex examples, interpreter)"," */","public class SymList ","{","    Map <String, SymEntry> m;","    SymList anc; //ancestor symlist","    ","    /**","     * First constructor, no ancestor.","     */","    public SymList()","    {","        this(null);","    }","    ","    /**","     * Second constructor, w/ ancestor.","     * @param anc Ancestor SymList.","     */","    public SymList(SymList anc)","    {","        m = new HashMap<String, SymEntry>();","        this.anc = anc;","    }","    ","    /**","     * Add a new symbol to the list.","     * @param s Name of symbol.","     * @param se Symbol value.","     * @return ","     */","    public Boolean addToList(String s, SymEntry se)","    {","        SymEntry symbol = getSymbol(s);","        Boolean symbolAvail = (symbol == null); //if symbol is not taken","        if(symbolAvail)","        {","            m.put(s, se);","        }","        return symbolAvail;","    }","    ","    /**","     * Get a symbol from the list.","     * @param s Name of symbol.","     * @return Symbol with matching name.","     */","    public SymEntry getSymbol(String s)","    {","        SymEntry symbol = m.get(s);","        if(symbol == null && anc != null) ","        {","            symbol = anc.getSymbol(s);","        }","        return symbol;","    }","    ","    /**","     * Function for editing a symbol in the list.","     * @param s Name of symbol.","     * @param se New value for symbol.","     */","    public void editSymbol(String s, SymEntry se)","    {","        SymEntry symbol = m.get(s);","        Boolean symbolAvail = (symbol == null); //if symbol is not taken","        if(!symbolAvail)","        {","            m.put(s, se);","        }","    }","    ","    @Override","    public String toString()","    {","        StringBuilder sb = new StringBuilder();","        Iterator i = m.entrySet().iterator();","        while (i.hasNext()) ","        {","            Map.Entry inst = (Map.Entry)i.next();","            sb.append(inst.getKey()).append(\" - \").append(inst.getValue()).append(\"\\n\");","        }","        return sb.toString();","    }","}"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":99,"column":0},"end":{"row":99,"column":2}},"text":"pa"},{"action":"removeText","range":{"start":{"row":98,"column":1},"end":{"row":99,"column":0}},"text":"\n"}]}]]},"ace":{"folds":[],"scrolltop":960,"scrollleft":0,"selection":{"start":{"row":99,"column":0},"end":{"row":99,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":65,"state":"start","mode":"ace/mode/java"}},"timestamp":1416202504934,"hash":"79611965e19f74ec9688ee1ede9b3f3cb41e76f2"}